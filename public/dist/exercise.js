/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*******************************!*\
  !*** ./public/js/exercise.js ***!
  \*******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("//jQuery to grab html elements in the exercise html\nconst workoutTypeSelect = document.querySelector(\"#type\");\nconst cardioForm = document.querySelector(\".cardio-form\");\nconst resistanceForm = document.querySelector(\".resistance-form\");\nconst cardioNameInput = document.querySelector(\"#cardio-name\");\nconst nameInput = document.querySelector(\"#name\");\nconst weightInput = document.querySelector(\"#weight\");\nconst setsInput = document.querySelector(\"#sets\");\nconst repsInput = document.querySelector(\"#reps\");\nconst durationInput = document.querySelector(\"#duration\");\nconst resistanceDurationInput = document.querySelector(\"#resistance-duration\");\nconst distanceInput = document.querySelector(\"#distance\");\nconst completeButton = document.querySelector(\"button.complete\");\nconst addButton = document.querySelector(\"button.add-another\");\nconst toast = document.querySelector(\"#toast\");\nconst newWorkout = document.querySelector(\".new-workout\");\n\n//creating global variables\nlet workoutType = null;\nlet shouldNavigateAway = false;\n\n//declaration of the initExercise function\nasync function initExercise() {\n  let workout;\n\n  if (location.search.split(\"=\")[1] === undefined) {\n    workout = await API.createWorkout();\n    console.log(workout);\n  }\n  if (workout) {\n    location.search = \"?id=\" + workout._id;\n  }\n}\n\n//calling the initExercise function\ninitExercise();\n\n//declaration of handleWorkoutTypeChange to show different forms for cardio type exercises than resistance type exercises\nfunction handleWorkoutTypeChange(event) {\n  workoutType = event.target.value;\n\n  if (workoutType === \"cardio\") {\n    cardioForm.classList.remove(\"d-none\");\n    resistanceForm.classList.add(\"d-none\");\n  } else if (workoutType === \"resistance\") {\n    resistanceForm.classList.remove(\"d-none\");\n    cardioForm.classList.add(\"d-none\");\n  } else {\n    cardioForm.classList.add(\"d-none\");\n    resistanceForm.classList.add(\"d-none\");\n  }\n//calling the validateInputs function\n  validateInputs();\n}\n\n//declaration of validateInputs function\nfunction validateInputs() {\n  let isValid = true;\n\n  //validation for resistance type exercises\n  if (workoutType === \"resistance\") {\n    if (nameInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (weightInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (setsInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (repsInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (resistanceDurationInput.value.trim() === \"\") {\n      isValid = false;\n    }\n    //validation for cardio type exercises\n  } else if (workoutType === \"cardio\") {\n    if (cardioNameInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (durationInput.value.trim() === \"\") {\n      isValid = false;\n    }\n\n    if (distanceInput.value.trim() === \"\") {\n      isValid = false;\n    }\n  }\n\n  if (isValid) {\n    completeButton.removeAttribute(\"disabled\");\n    addButton.removeAttribute(\"disabled\");\n  } else {\n    completeButton.setAttribute(\"disabled\", true);\n    addButton.setAttribute(\"disabled\", true);\n  }\n}\n\n//declare handleFormSubmit function\nasync function handleFormSubmit(event) {\n  event.preventDefault();\n\n  let workoutData = {};\n\n  //how to handle the submission of cardio type exercises\n  if (workoutType === \"cardio\") {\n    workoutData.type = \"cardio\";\n    workoutData.name = cardioNameInput.value.trim();\n    workoutData.distance = Number(distanceInput.value.trim());\n    workoutData.duration = Number(durationInput.value.trim());\n    //how to handle the submission of resistance type exercises\n  } else if (workoutType === \"resistance\") {\n    workoutData.type = \"resistance\";\n    workoutData.name = nameInput.value.trim();\n    workoutData.weight = Number(weightInput.value.trim());\n    workoutData.sets = Number(setsInput.value.trim());\n    workoutData.reps = Number(repsInput.value.trim());\n    workoutData.duration = Number(resistanceDurationInput.value.trim());\n  }\n\n  //calling the api.addExercise function\n  await API.addExercise(workoutData);\n  //calling the clearInputs function\n  clearInputs();\n  //running the success modal \n  toast.classList.add(\"success\");\n}\n\n//declare function with success modal\nfunction handleToastAnimationEnd() {\n  toast.removeAttribute(\"class\");\n  if (shouldNavigateAway) {\n    location.href = \"/\";\n  }\n}\n\n//declaration of clearInputs function\nfunction clearInputs() {\n  cardioNameInput.value = \"\";\n  nameInput.value = \"\";\n  setsInput.value = \"\";\n  distanceInput.value = \"\";\n  durationInput.value = \"\";\n  repsInput.value = \"\";\n  resistanceDurationInput.value = \"\";\n  weightInput.value = \"\";\n}\n\n//logic to change the form when the workout type is changed cardio/resistance\nif (workoutTypeSelect) {\n  workoutTypeSelect.addEventListener(\"change\", handleWorkoutTypeChange);\n}\n\n//logic for what to do if completeButton is pushed\nif (completeButton) {\n  completeButton.addEventListener(\"click\", function (event) {\n    shouldNavigateAway = true;\n    handleFormSubmit(event);\n  });\n}\n//logic for what to do if add exercise button pushed \nif (addButton) {\n  addButton.addEventListener(\"click\", handleFormSubmit);\n}\ntoast.addEventListener(\"animationend\", handleToastAnimationEnd);\n\ndocument\n  .querySelectorAll(\"input\")\n  .forEach((element) => element.addEventListener(\"input\", validateInputs));\n\n\n//# sourceURL=webpack://mongoose_skeleton/./public/js/exercise.js?");
/******/ })()
;